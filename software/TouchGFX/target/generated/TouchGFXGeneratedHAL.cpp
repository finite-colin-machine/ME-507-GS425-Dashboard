/**
  ******************************************************************************
  * File Name          : TouchGFXGeneratedHAL.cpp
  ******************************************************************************
  * This file is generated by TouchGFX Generator 4.25.0. Please, do not edit!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#include <TouchGFXGeneratedHAL.hpp>
#include <touchgfx/hal/OSWrappers.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/hal/GPIO.hpp>

#include "stm32f7xx.h"
#include "stm32f7xx_hal_ltdc.h"

using namespace touchgfx;

extern LTDC_HandleTypeDef hltdc;

/* Size of the CLUT */
#define CLUT_SIZE  256

__ALIGN_BEGIN static const uint32_t LCD8bpp_CLUT[CLUT_SIZE] __ALIGN_END =
{
    0x00000000, 0x55000000, 0xAA000000, 0xFF000000,
    0x00000055, 0x55000055, 0xAA000055, 0xFF000055,
    0x000000AA, 0x550000AA, 0xAA0000AA, 0xFF0000AA,
    0x000000FF, 0x550000FF, 0xAA0000FF, 0xFF0000FF,
    0x00005500, 0x55005500, 0xAA005500, 0xFF005500,
    0x00005555, 0x55005555, 0xAA005555, 0xFF005555,
    0x000055AA, 0x550055AA, 0xAA0055AA, 0xFF0055AA,
    0x000055FF, 0x550055FF, 0xAA0055FF, 0xFF0055FF,
    0x0000AA00, 0x5500AA00, 0xAA00AA00, 0xFF00AA00,
    0x0000AA55, 0x5500AA55, 0xAA00AA55, 0xFF00AA55,
    0x0000AAAA, 0x5500AAAA, 0xAA00AAAA, 0xFF00AAAA,
    0x0000AAFF, 0x5500AAFF, 0xAA00AAFF, 0xFF00AAFF,
    0x0000FF00, 0x5500FF00, 0xAA00FF00, 0xFF00FF00,
    0x0000FF55, 0x5500FF55, 0xAA00FF55, 0xFF00FF55,
    0x0000FFAA, 0x5500FFAA, 0xAA00FFAA, 0xFF00FFAA,
    0x0000FFFF, 0x5500FFFF, 0xAA00FFFF, 0xFF00FFFF,
    0x00550000, 0x55550000, 0xAA550000, 0xFF550000,
    0x00550055, 0x55550055, 0xAA550055, 0xFF550055,
    0x005500AA, 0x555500AA, 0xAA5500AA, 0xFF5500AA,
    0x005500FF, 0x555500FF, 0xAA5500FF, 0xFF5500FF,
    0x00555500, 0x55555500, 0xAA555500, 0xFF555500,
    0x00555555, 0x55555555, 0xAA555555, 0xFF555555,
    0x005555AA, 0x555555AA, 0xAA5555AA, 0xFF5555AA,
    0x005555FF, 0x555555FF, 0xAA5555FF, 0xFF5555FF,
    0x0055AA00, 0x5555AA00, 0xAA55AA00, 0xFF55AA00,
    0x0055AA55, 0x5555AA55, 0xAA55AA55, 0xFF55AA55,
    0x0055AAAA, 0x5555AAAA, 0xAA55AAAA, 0xFF55AAAA,
    0x0055AAFF, 0x5555AAFF, 0xAA55AAFF, 0xFF55AAFF,
    0x0055FF00, 0x5555FF00, 0xAA55FF00, 0xFF55FF00,
    0x0055FF55, 0x5555FF55, 0xAA55FF55, 0xFF55FF55,
    0x0055FFAA, 0x5555FFAA, 0xAA55FFAA, 0xFF55FFAA,
    0x0055FFFF, 0x5555FFFF, 0xAA55FFFF, 0xFF55FFFF,
    0x00AA0000, 0x55AA0000, 0xAAAA0000, 0xFFAA0000,
    0x00AA0055, 0x55AA0055, 0xAAAA0055, 0xFFAA0055,
    0x00AA00AA, 0x55AA00AA, 0xAAAA00AA, 0xFFAA00AA,
    0x00AA00FF, 0x55AA00FF, 0xAAAA00FF, 0xFFAA00FF,
    0x00AA5500, 0x55AA5500, 0xAAAA5500, 0xFFAA5500,
    0x00AA5555, 0x55AA5555, 0xAAAA5555, 0xFFAA5555,
    0x00AA55AA, 0x55AA55AA, 0xAAAA55AA, 0xFFAA55AA,
    0x00AA55FF, 0x55AA55FF, 0xAAAA55FF, 0xFFAA55FF,
    0x00AAAA00, 0x55AAAA00, 0xAAAAAA00, 0xFFAAAA00,
    0x00AAAA55, 0x55AAAA55, 0xAAAAAA55, 0xFFAAAA55,
    0x00AAAAAA, 0x55AAAAAA, 0xAAAAAAAA, 0xFFAAAAAA,
    0x00AAAAFF, 0x55AAAAFF, 0xAAAAAAFF, 0xFFAAAAFF,
    0x00AAFF00, 0x55AAFF00, 0xAAAAFF00, 0xFFAAFF00,
    0x00AAFF55, 0x55AAFF55, 0xAAAAFF55, 0xFFAAFF55,
    0x00AAFFAA, 0x55AAFFAA, 0xAAAAFFAA, 0xFFAAFFAA,
    0x00AAFFFF, 0x55AAFFFF, 0xAAAAFFFF, 0xFFAAFFFF,
    0x00FF0000, 0x55FF0000, 0xAAFF0000, 0xFFFF0000,
    0x00FF0055, 0x55FF0055, 0xAAFF0055, 0xFFFF0055,
    0x00FF00AA, 0x55FF00AA, 0xAAFF00AA, 0xFFFF00AA,
    0x00FF00FF, 0x55FF00FF, 0xAAFF00FF, 0xFFFF00FF,
    0x00FF5500, 0x55FF5500, 0xAAFF5500, 0xFFFF5500,
    0x00FF5555, 0x55FF5555, 0xAAFF5555, 0xFFFF5555,
    0x00FF55AA, 0x55FF55AA, 0xAAFF55AA, 0xFFFF55AA,
    0x00FF55FF, 0x55FF55FF, 0xAAFF55FF, 0xFFFF55FF,
    0x00FFAA00, 0x55FFAA00, 0xAAFFAA00, 0xFFFFAA00,
    0x00FFAA55, 0x55FFAA55, 0xAAFFAA55, 0xFFFFAA55,
    0x00FFAAAA, 0x55FFAAAA, 0xAAFFAAAA, 0xFFFFAAAA,
    0x00FFAAFF, 0x55FFAAFF, 0xAAFFAAFF, 0xFFFFAAFF,
    0x00FFFF00, 0x55FFFF00, 0xAAFFFF00, 0xFFFFFF00,
    0x00FFFF55, 0x55FFFF55, 0xAAFFFF55, 0xFFFFFF55,
    0x00FFFFAA, 0x55FFFFAA, 0xAAFFFFAA, 0xFFFFFFAA,
    0x00FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0xFFFFFFFF
};

namespace
{
// Use the section "TouchGFX_Framebuffer" in the linker script to specify the placement of the buffer
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(600 * 380 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
    HAL::initialize();

    /* Configure the LTDC CLUT */
    /* Setup LTDC LUT Configuration */
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t*)LCD8bpp_CLUT, CLUT_SIZE, 0);
    HAL_LTDC_EnableCLUT(&hltdc, 0);

    registerEventListener(*(Application::getInstance()));
    registerTaskDelayFunction(&OSWrappers::taskDelay);
    if (!setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL))
    {
        while (1);
    }
    enableLCDControllerInterrupt();
    enableInterrupts();
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & LTDC_BPCR_AVBP_Msk) - 1;
    lcd_int_porch_line = (LTDC->AWCR & LTDC_AWCR_AAH_Msk) - 1;

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
}

bool TouchGFXGeneratedHAL::beginFrame()
{
    return HAL::beginFrame();
}

void TouchGFXGeneratedHAL::endFrame()
{
    HAL::endFrame();
    touchgfx::OSWrappers::signalRenderingDone();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
}

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
}

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & LTDC_CPSR_CYPOS_Msk);
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & LTDC_BPCR_AVBP_Msk) + 1;

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
}

void TouchGFXGeneratedHAL::InvalidateCache()
{
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}

void TouchGFXGeneratedHAL::FlushCache()
{
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
}
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
